# Form implementation generated from reading ui file 'listwidget.ui'
#
# Created by: PyQt6 UI code generator 6.5.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import json
from pathlib import Path
import serial.tools.list_ports
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt
from initiate_statemachine import initiate_statemachine
import sys


# current dir
current_dir = os.getcwd()
print(current_dir)

if sys.platform == "win32":
    forbiden_dir = "\PyQT_GUI\pyqt6"
else:
    forbiden_dir = "/PyQT_GUI/pyqt6"

if(current_dir.find(forbiden_dir)):
    current_dir = current_dir.replace(forbiden_dir,'/')

class MainWindow(object):

    def __init__(self):                                                  

        dir_failed_test = current_dir + "/PyQT_GUI/logs_SM2/Fail_logs"               
        if not os.path.exists(dir_failed_test):                              # if the directory is not created, it will create
            os.makedirs(dir_failed_test)

        dir_all_logs = current_dir + "/PyQT_GUI/logs_SM2/Result_logs_SM2"
        if not os.path.exists(dir_all_logs):
            os.makedirs(dir_all_logs)

        dir_terminal_logs = current_dir + "/PyQT_GUI/logs_SM2/Terminal_logs_SM2"
        if not os.path.exists(dir_terminal_logs):
            os.makedirs(dir_terminal_logs)


    def setupUi(self, QMainWindow, Logs_window_main, setup_window_main):

        QMainWindow.setObjectName("MainWindow")
        QMainWindow.resize(1260, 800)
        QMainWindow.setFixedSize(1260, 800)

        self.centralwidget = QtWidgets.QWidget(parent=QMainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.img_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.img_label.setGeometry(QtCore.QRect(470, 20, 260, 40))
        self.pixmap = QtGui.QPixmap(current_dir + '/PyQT_GUI/pyqt6/resources/Abeeway_LOGO_blue-small.png')
        self.img_label.setPixmap(self.pixmap)
        self.img_label.setScaledContents(True)
        self.img_label.setObjectName("img_label")

        # all buttons in the left
        self.Setup_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Setup_button.setGeometry(QtCore.QRect(1130, 130, 100, 60))          # Setup_button button
        self.Setup_button.setObjectName("Setup_button")

        self.Setup_button.clicked.connect(self.show_setup_window)

        self.Logs = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Logs.setGeometry(QtCore.QRect(1130, 530, 100, 60))                   # Logs button
        self.Logs.setObjectName("Logs")

        self.Logs.clicked.connect(self.show_new_window)

        self.About = QtWidgets.QPushButton(parent=self.centralwidget)           # about button
        self.About.setGeometry(QtCore.QRect(1130, 30, 100, 60))
        self.About.setObjectName("About")

        self.About.clicked.connect(self.about_information)

        self.Exit = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Exit.setGeometry(QtCore.QRect(1130, 630, 100, 60))
        self.Exit.setObjectName("Exit")                                         # Exit button

        self.Exit.clicked.connect(self.exit_window)                             # when exit button is clicked, window closed

        self.textEdit_trace = QtWidgets.QTextEdit(parent=self.centralwidget)    # textEdit_trace
        self.textEdit_trace.setGeometry(QtCore.QRect(40, 470, 1060, 280))
        self.textEdit_trace.setReadOnly(True)
        self.textEdit_trace.setObjectName("textEdit_trace")


        self.clear_trace = QtWidgets.QPushButton(parent=self.centralwidget)
        self.clear_trace.setGeometry(QtCore.QRect(990, 430, 90, 30))
        self.clear_trace.setObjectName("clear_trace_button")             # clear trace button


        # all buttons in the center 
        self.Select_all = QtWidgets.QPushButton(parent=self.centralwidget)      # Select_all button
        self.Select_all.setGeometry(QtCore.QRect(870, 30, 90, 30))
        self.Select_all.setObjectName("Select_all")


        self.Clear_all = QtWidgets.QPushButton(parent=self.centralwidget)       # clear_all button
        self.Clear_all.setGeometry(QtCore.QRect(980, 30, 90, 30))
        self.Clear_all.setObjectName("Clear_all")


        self.Select_Test_label = QtWidgets.QLabel(parent=self.centralwidget)     # select_test label
        self.Select_Test_label.setGeometry(QtCore.QRect(30, 30, 110, 30))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.Select_Test_label.setFont(font)
        self.Select_Test_label.setObjectName("Select_Test_Tabel")

        self.comboBox_test_group = QtWidgets.QComboBox(parent=self.centralwidget)   # comboBox_test_group
        self.comboBox_test_group.setGeometry(QtCore.QRect(150, 30, 210, 25))
        self.comboBox_test_group.setObjectName("comboBox")
        self.comboBox_test_group.addItems(["All Tests", "Geoloc Timing", "Payload", "Uplink MQTT", "Downlink MQTT", "Lora Link Check"])
        
        
        # all buttons in the right 
        self.Start_Test = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Start_Test.setGeometry(QtCore.QRect(1130, 230, 100, 60))
        self.Start_Test.setObjectName("Start_Test")                             # Start_test button

        self.Start_Test.setEnabled(False)                                       # By default start button is off 
       

        self.Stop_Test = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Stop_Test.setGeometry(QtCore.QRect(1130, 330, 100, 60))
        self.Stop_Test.setObjectName("Stop_Test")                               # Stop_test button

        self.Stop_Test.setEnabled(False)                                        # By default stop button is off  

        self.Show_Result = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Show_Result.setGeometry(QtCore.QRect(1130, 430, 100, 60))
        self.Show_Result.setObjectName("Show_Result")                           # show_result button
        

        # Test files path
        self.tests_files_path = current_dir + "/PyQT_GUI/json_all"
        self.json_all_files = sorted(os.listdir(self.tests_files_path))

        self.json_all_files_without_extension = [Path(i).stem for i in self.json_all_files]    # Initially showcasing the test files without json extension

        self.my_test_lists = QtWidgets.QListWidget(parent=self.centralwidget)
        self.my_test_lists.setGeometry(QtCore.QRect(35, 70, 1060, 200))
        self.my_test_lists.addItems(self.json_all_files_without_extension)
        self.my_test_lists.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.MultiSelection)
        self.my_test_lists.setObjectName("listWidget")                         # list widget to see all the test files and select
        
        self.total_test_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.total_test_label.setGeometry(QtCore.QRect(35, 300, 340, 17))
        self.total_test_label.setObjectName("total_test_label")
        self.total_test_label.setText(f"Total number of test selected : 0 of {len(os.listdir(self.tests_files_path))}")   # display the no of tests at initial state

        self.progressBar = QtWidgets.QProgressBar(parent=self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(80, 340, 980, 20))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")                           # progressbar

        self.Traces_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.Traces_label.setGeometry(QtCore.QRect(40, 430, 70, 30))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.Traces_label.setFont(font)
        self.Traces_label.setObjectName("Traces")                               # Traces label

        self.total_test_completed_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.total_test_completed_label.setGeometry(QtCore.QRect(130, 440, 310, 17))
        self.total_test_completed_label.setObjectName("total_completed_label")   # total test completed label
        self.total_test_completed_label.setText("Total number of test completed : 0 of 0")  # Initially showcasing total number of test completed : 0 of 0

        
        self.running_test_label = QtWidgets.QLabel(parent=self.centralwidget)      
        self.running_test_label.setGeometry(QtCore.QRect(40, 390, 1050, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.running_test_label.setFont(font) 
        self.running_test_label.setObjectName("running_test_label")                # running test label

        self.running_test_label.setText("Running Test : None")                     # Initially running test label is none

        self.passed_test_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.passed_test_label.setGeometry(QtCore.QRect(490, 440, 160, 15))
        self.passed_test_label.setObjectName("passed_test_label")

        self.passed_test_label.setText("Passed Test : 0")                         # passed test label  

        self.failed_test_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.failed_test_label.setGeometry(QtCore.QRect(730, 440, 170, 15))
        self.failed_test_label.setObjectName("failed_test_label")                 

        self.failed_test_label.setText("Failed Test : 0")                         # failed test label

        self.About.setStyleSheet("background-color: rgb(143, 240, 164);") 
        self.Show_Result.setStyleSheet("background-color: rgb(143, 240, 164);") 
        self.Logs.setStyleSheet("background-color: rgb(143, 240, 164);") 
        self.Exit.setStyleSheet("background-color: rgb(143, 240, 164);")  


        QMainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(QMainWindow)
        QtCore.QMetaObject.connectSlotsByName(QMainWindow)
 

    def retranslateUi(self, QMainWindow):
        _translate = QtCore.QCoreApplication.translate
        QMainWindow.setWindowTitle(_translate("QMainWindow", "QA AT3 1.0-195"))
        self.Start_Test.setText(_translate("QMainWindow", "Start Test"))
        self.Stop_Test.setText(_translate("QMainWindow", "Stop Test"))
        self.Show_Result.setText(_translate("QMainWindow", "Summary"))
        self.Setup_button.setText(_translate("QMainWindow", "Setup"))
        self.Logs.setText(_translate("QMainWindow", "Logs"))
        self.Exit.setText(_translate("QMainWindow", "Exit"))
        self.Select_Test_label.setText(_translate("QMainWindow", "Select Test :"))
        self.Select_all.setText(_translate("QMainWindow", "Select all"))
        self.Clear_all.setText(_translate("QMainWindow", "Clear all"))
        self.About.setText(_translate("QMainWindow", "About"))
        self.Traces_label.setText(_translate("QMainWindow", "Traces : "))
        self.clear_trace.setText(_translate("QMainWindow", "Clear Trace"))

    def exit_window(self):
        QtWidgets.QApplication.instance().quit()                          # main window closed

    def show_new_window(self):
        Logs_window_main.close()                                          # log window close and open
        Logs_window_main.show()    

    def about_information(self, s):
            dlg = QtWidgets.QMessageBox()
            dlg.setWindowTitle("About")
            dlg.setText("This is a testing tool for AT3 firmware. \n\nVarious states are defined in a JSON file based on the tests. The tool uses JSON to conduct the tests, and finally, result and debug files are generated. The test failures are categorized into three types: result fail, timeout fail, and loop error. \n\nBefore starting the test, \n\n (I) Ensure your device is connected to the USB port, \n\n (II) The AT3 terminal is should be closed (if open), \n\n (III) The VPN is turned on to connect to MQTT. \n\nDuring testing, do not move the board, as variations in acceleration can cause the test to fail. Additionally, keep the BLE beacon (ac233f52bf27) and Wi-Fi (08bfb88e7ca8) close. \n\n The result of the test is shown in logs")
            button = dlg.exec()

            if button == QtWidgets.QMessageBox.StandardButton.Ok:
                print("OK!")    

    def show_setup_window(self):
        self.my_test_lists.setEnabled(False)                          # when setup window is opened, my_test_lists are disabled
        self.my_test_lists.clearSelection()                           # when setup window is opened, my_test_lists selection cleared
        setup_window_main.close()
        setup_window_main.show()                                      # setup window close and open      
   
class setup_window(QtWidgets.QWidget):
    def __init__(self, w):
        super().__init__()
        self.w = w

        self.setObjectName("Setup")
        self.resize(475, 470)
        self.setFixedSize(475, 470)

        self.Select_DevEUI_label = QtWidgets.QLabel(self)
        self.Select_DevEUI_label.setGeometry(QtCore.QRect(60, 50, 111, 15))
        self.Select_DevEUI_label.setObjectName("Select_DevEUI_label")              # Select_DevEUI_label

        self.ok_button_DevEUI = QtWidgets.QPushButton(self)
        self.ok_button_DevEUI.setGeometry(QtCore.QRect(180, 390, 100, 30))
        self.ok_button_DevEUI.setObjectName("ok_button_DevEUI")                    # ok_button_DevEUI

        self.By_default_label = QtWidgets.QLabel(self)
        self.By_default_label.setGeometry(QtCore.QRect(110, 100, 80, 15))
        self.By_default_label.setObjectName("By_default_label")                    # By_default_label

        self.checkBox_devEUI = QtWidgets.QCheckBox(self)
        self.checkBox_devEUI.setGeometry(QtCore.QRect(160, 130, 180, 23))
        self.checkBox_devEUI.setObjectName("checkBox_devEUI")                      # checkBox_devEUI

        self.checkBox_devEUI.setCheckState(Qt.CheckState.Checked)

        self.lineEdit_devEUI = QtWidgets.QLineEdit(self)
        self.lineEdit_devEUI.setGeometry(QtCore.QRect(110, 210, 270, 25))
        self.lineEdit_devEUI.setObjectName("lineEdit_devEUI")                      # lineEdit_devEUI
        self.lineEdit_devEUI.setPlaceholderText("Enter DevEUI as same as MQTT topic")

        self.lineEdit_devEUI.setEnabled(False)                                     # Initially lineEdit_devEUI is disabled

        self.Enter_devEUI_label = QtWidgets.QLabel(self)
        self.Enter_devEUI_label.setGeometry(QtCore.QRect(110, 170, 100, 15))
        self.Enter_devEUI_label.setObjectName("Enter_devEUI_label")                # Enter_devEUI_label


        self.check_device_label = QtWidgets.QLabel(self)
        self.check_device_label.setGeometry(QtCore.QRect(60, 270, 260, 15))        # check_device_label
        self.check_device_label.setObjectName("check_device_label")

        self.check_button = QtWidgets.QPushButton(self)
        self.check_button.setGeometry(QtCore.QRect(320, 260, 100, 30))             # check_button
        self.check_button.setObjectName("check_button")

        self.output_label = QtWidgets.QLabel(self)
        self.output_label.setGeometry(QtCore.QRect(60, 320, 370, 15))              # output_label
        self.output_label.setObjectName("output_label") 

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        self.setup_connections()


    def setup_connections(self):
        self.checkBox_devEUI.stateChanged.connect(self.show_state)              # if checkBox_devEUI is changed,   
        self.ok_button_DevEUI.clicked.connect(self.ok_clicked)                  # if ok_button is clicked,
        self.check_button.clicked.connect(self.show_device)                     # show device connected or not
        

    def show_state(self, s):
        if s == Qt.CheckState.Checked.value:                             # if checkbox is checked,  lineEdit_devEUI is disabled and cleared 
            print(s)
            self.lineEdit_devEUI.setEnabled(False)
            self.lineEdit_devEUI.clear()
        else:
            self.lineEdit_devEUI.setEnabled(True)                        # or lineEdit_devEUI is enabled

        
    def ok_clicked(self):
        
        if self.checkBox_devEUI.isChecked() and self.lineEdit_devEUI.text() == "":
            self.w.my_test_lists.setEnabled(True)                                          # if ok_clicked from setup dialog, and checkbox checked, lineEdit_devEUI is empty, my_tests_lists is enabled
            self.close()
        elif self.lineEdit_devEUI.text().startswith("20635") and (self.checkBox_devEUI.isChecked() != True):  # or lineEdit_devEUI must starts with "20635" and checkBox_devEUI is disabled, my_tests_lists is enabled.
            self.w.my_test_lists.setEnabled(True)
            self.close()    

    def show_device(self):                                  # show device connected or not

        mData = None  # Initialize mData to None
        
        
        ports = list(serial.tools.list_ports.comports())
        for p in ports:
            if "STM" in p.description:
                mData = serial.Serial(p.device, 57600)
        if mData and mData.is_open:
            self.output_label.setText(f"output : Device connected to the port {mData.name}")
        else:
            self.output_label.setText(f"output : Device not connected")   

        

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Setup", "Setup"))
        self.Select_DevEUI_label.setText(_translate("Setup", "Select DevEUI :"))
        self.ok_button_DevEUI.setText(_translate("Setup", "ok"))
        self.By_default_label.setText(_translate("Setup", "By default :"))
        self.checkBox_devEUI.setText(_translate("Setup", "    20635FACAB000144"))
        self.Enter_devEUI_label.setText(_translate("Setup", "Enter DevEUI :"))
        self.check_device_label.setText(_translate("Setup", "Check device connected to the port :"))
        self.check_button.setText(_translate("Setup", "check"))
        self.output_label.setText(_translate("Setup", "output :"))        


class list_files_selection:
    def __init__(self, w):
        self.w = w
        self.x = []
        self.setup_connections()

    def setup_connections(self):
        self.w.comboBox_test_group.currentTextChanged.connect(self.update_testlist_by_group) # show the test_lists based on the group when combobox clicked
        self.w.Select_all.clicked.connect(self.selectall_testcases)                  # select all button clicked
        self.w.Clear_all.clicked.connect(self.clear_testcases)                       # clear all button clicked
        self.w.my_test_lists.itemSelectionChanged.connect(self.choose_testcases)     # list widget, multiple access using mouse  

        
    def add_test_files_to_run(self, test_files):
        self.x = []
        if test_files:

            self.w.Start_Test.setEnabled(True)                                       # enable start button when you select the test files

            for i in range(len(test_files)):
                self.x.append(str(test_files[i].text())+".json")                             # adding selected tests in the listwidget
            print(self.x)
        else:
            self.w.Start_Test.setEnabled(False)                                      # disable start button when you not selected the test files
            print(self.x)
        self.w.total_test_label.setText(f"Total number of test selected : {len(self.x)} of {len(os.listdir(self.w.tests_files_path))}")    # dynamic no of tests label
        
    

    def choose_testcases(self):
        test_files = self.w.my_test_lists.selectedItems()                          # to choose the test files in the list
        self.add_test_files_to_run(test_files)                  

    def clear_testcases(self):
        clear = self.w.my_test_lists.clearSelection()                                # to clear the test files in the list  
        self.add_test_files_to_run(clear)

    def selectall_testcases(self):
        self.w.my_test_lists.selectAll()
        selectall_files = self.w.my_test_lists.selectedItems()                       # to choose all the test files in the list 
        self.add_test_files_to_run(selectall_files)    


    def update_testlist_by_group(self, group_name):
        self.change_testlist_by_group(group_name, self.w.my_test_lists)
            
    def change_testlist_by_group(self, group_name, Qlistwidget):    
        test_groups = {                                            # created dictionary to add the test files by group
                "All Tests": [],
                "Geoloc Timing": [],
                "Payload": [],
                "Uplink MQTT": [],
                "Downlink MQTT": [],
                "Lora Link Check": []
            }

        for tests in self.w.json_all_files:                                     # search all the json files by its test_callback_functions and add the test files in dictionary 
            with open(self.w.tests_files_path + "/" + tests) as f:                 
                geoloc_group_tests = json.load(f)
                Test_callback_function = geoloc_group_tests["Description"]["Test_callback_function"]

                if group_name == "All Tests":
                    test_groups["All Tests"].append(Path(tests).stem)           # showcasing the test files without extension in listwidget
                
                elif group_name == "Geoloc Timing" and Test_callback_function == "Geoloc_Timing":
                    test_groups["Geoloc Timing"].append(Path(tests).stem) 
                
                elif group_name == "Payload" and Test_callback_function == "Payload":
                    test_groups["Payload"].append(Path(tests).stem)

                elif group_name == "Uplink MQTT" and Test_callback_function == "Uplink_MQTT":
                    test_groups["Uplink MQTT"].append(Path(tests).stem)

                elif group_name == "Downlink MQTT" and Test_callback_function == "Downlink_MQTT":
                    test_groups["Downlink MQTT"].append(Path(tests).stem)

                elif group_name == "Lora Link Check" and Test_callback_function == "Lora_Link_Check":
                    test_groups["Lora Link Check"].append(Path(tests).stem)     

        Qlistwidget.clear()                                     # clear previous files
        Qlistwidget.addItems(test_groups[group_name])           # added current choosed test files based on the group


class log_selection:
    def __init__(self, w, Logs_window_main, log_window_list_controller):
        self.w = w
        self.Logs_window_main = Logs_window_main
        self.log_window_list_controller = log_window_list_controller
        self.setup_connections()

    def setup_connections(self):
        
        self.w.Show_Result.clicked.connect(self.summary_log) 
        self.Logs_window_main.Result_current_and_previous_test_button.clicked.connect(self.result_log)             # to view the result log
        self.Logs_window_main.terminal_log_current_and_previous_test_button.clicked.connect(self.debug_log)        # to view the terminal log
        self.Logs_window_main.Json_current_and_previous_test_button.clicked.connect(self.json_for_tests)           # to view the json file

        self.Logs_window_main.listWidget_select_files.currentTextChanged.connect(self.when_list_file_is_selected)  # if list is selected, json button is on 
        self.Logs_window_main.Json_button.clicked.connect(self.choose_json_only)                                   # if json button is clicked, open file
        self.Logs_window_main.delete_log_button.clicked.connect(self.delete_logs)                                  # to delete the logs
        self.Logs_window_main.Description_button.clicked.connect(self.show_description)                            # to show description 



    def when_list_file_is_selected(self):
        self.Logs_window_main.Json_button.setEnabled(True)                                        # json button on   
        self.Logs_window_main.Description_button.setEnabled(True)                                 # description button is on 

    def choose_json_only(self):
        Json_log_path = current_dir + "/PyQT_GUI/json_all" + "/" + self.Logs_window_main.listWidget_select_files.currentItem().text() + ".json"  # json file path
        self.open_log(Json_log_path) 

    def summary_log(self):
        summary_log_path = current_dir + "/PyQT_GUI/logs_SM2/Summary_Log.txt"
        self.open_log(summary_log_path) 

    def result_log(self):    
        Result_log_path = current_dir + "/PyQT_GUI/logs_SM2/Result_logs_SM2" + "/" + self.log_window_list_controller.test_name_current_and_previous + ".txt"
        self.open_log(Result_log_path)

    def debug_log(self):  
        Terminal_log_path = current_dir + "/PyQT_GUI/logs_SM2/Terminal_logs_SM2" + "/" + self.log_window_list_controller.test_name_current_and_previous + ".txt"
        self.open_log(Terminal_log_path)  

    def json_for_tests(self):

        pattern = r"_\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2}"                # Regular expression to match the date and time pattern

        new_filename = re.sub(pattern, '', self.log_window_list_controller.test_name_current_and_previous)   # Remove the date and time pattern from the filename

        Json_log_path = current_dir + "/PyQT_GUI/json_all" + "/" + new_filename + ".json"           
        self.open_log(Json_log_path)




    def open_log(self,file_path):

        print(f"Button clicked. Trying to open file: {file_path}")  # Debug print

        if os.path.isfile(file_path):                                           # Open the file in the default text editor
            if sys.platform == "win32":                                         # windows
                os.startfile(file_path) 
            elif sys.platform == "darwin":                                      # mac os
                subprocess.run(["open", file_path])
            else:
                subprocess.run(["xdg-open", file_path])                         # linux
            print("File opened successfully.")  
        else:
            dlg = QtWidgets.QMessageBox()
            dlg.setWindowTitle("Error")
            dlg.setText(f"File Not Found : {file_path}")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Question)
            dlg.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)
            button = dlg.exec()

            if button == QtWidgets.QMessageBox.StandardButton.Ok:
                print("OK!")    

    def delete_logs(self):
        Result_log_path = current_dir + "/PyQT_GUI/logs_SM2/Result_logs_SM2" 
        Terminal_log_path = current_dir + "/PyQT_GUI/logs_SM2/Terminal_logs_SM2"

        dlg = QtWidgets.QMessageBox()
        dlg.setWindowTitle("Delete Logs")
        dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
        dlg.setText("Are you sure you want to delete all the result logs and debug logs?")
        dlg.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Cancel | QtWidgets.QMessageBox.StandardButton.Ok)
        button = dlg.exec()

        if button == QtWidgets.QMessageBox.StandardButton.Ok:
            print("OK!")

            try:
                result_files = os.listdir(Result_log_path)
                terminal_files = os.listdir(Terminal_log_path)

                for i in result_files:
                    file_path1 = os.path.join(Result_log_path, i)
                    if os.path.isfile(file_path1):
                       os.remove(file_path1)

                for j in terminal_files:    
                    file_path2 = os.path.join(Terminal_log_path, j)    
                    if os.path.isfile(file_path2):   
                       os.remove(file_path2)

                print("All files deleted successfully.")

                if self.Logs_window_main.comboBox_select_tests.currentText() == "Previous Tests":    # if the comboBox_select_tests is "Previous Tests", clear the files after deletion.
                    self.Logs_window_main.listWidget_current_test.clear()

            except OSError:
                print("Error occurred while deleting files.")

    def show_description(self):
        Json_log_path = current_dir + "/PyQT_GUI/json_all" + "/" + self.Logs_window_main.listWidget_select_files.currentItem().text() + ".json"  # json file path

        with open(Json_log_path) as f:
            test_json = json.load(f)

        dlg = QtWidgets.QMessageBox()
        dlg.setWindowTitle("Description")
        dlg.setText(test_json["Description"]["Test_description"])
        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
        dlg.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)
        button = dlg.exec()

        if button == QtWidgets.QMessageBox.StandardButton.Ok:
            print("OK!")    



class Logs_window(QtWidgets.QWidget):
    
    def __init__(self):
        super().__init__()

        self.setObjectName("Logs")
        self.resize(1165, 850)
        self.setFixedSize(1165, 850)
        

        self.test_label = QtWidgets.QLabel(self)
        self.test_label.setGeometry(QtCore.QRect(20, 80, 110, 30))
        self.test_label.setObjectName("test_label")           # test_label

        self.comboBox_select_tests = QtWidgets.QComboBox(self)
        self.comboBox_select_tests.setGeometry(QtCore.QRect(130, 80, 220, 25))
        self.comboBox_select_tests.setObjectName("comboBox_select_tests")     # comboBox for current and previous tests

        self.comboBox_select_tests.addItems(["Current Tests", "Previous Tests"])

        self.total_test_completed_label_log = QtWidgets.QLabel(self)
        self.total_test_completed_label_log.setGeometry(QtCore.QRect(350, 390, 330, 17))
        self.total_test_completed_label_log.setObjectName("total_completed_label")   # total test completed label
        self.total_test_completed_label_log.setText("Total number of test completed : 0 of 0")  # Initially showcasing total number of test completed : 0 of 0

        self.status_label = QtWidgets.QLabel(self)
        self.status_label.setGeometry(QtCore.QRect(1050, 80, 90, 30))
        self.status_label.setObjectName("status_label")

        self.Result_current_and_previous_test_button = QtWidgets.QPushButton(self)
        self.Result_current_and_previous_test_button.setGeometry(QtCore.QRect(800, 380, 90, 40))
        self.Result_current_and_previous_test_button.setObjectName("Result_current_and_previous_test_button")  # Result_current_and_previous_test_button

        self.Json_current_and_previous_test_button = QtWidgets.QPushButton(self)
        self.Json_current_and_previous_test_button.setGeometry(QtCore.QRect(1040, 380, 100, 40))
        self.Json_current_and_previous_test_button.setObjectName("Json_current_and_previous_test_button")      # Json_current_and_previous_test_button

        self.terminal_log_current_and_previous_test_button = QtWidgets.QPushButton(self)
        self.terminal_log_current_and_previous_test_button.setGeometry(QtCore.QRect(920, 380, 90, 40))
        self.terminal_log_current_and_previous_test_button.setObjectName("terminal_log_current_and_previous_test_button")  # terminal_log_current_and_previous_test_button

        self.Result_current_and_previous_test_button.setEnabled(False)             # Initially all the buttons are disabled
        self.Json_current_and_previous_test_button.setEnabled(False) 
        self.terminal_log_current_and_previous_test_button.setEnabled(False)

        self.listWidget_current_test = QtWidgets.QListWidget(self)
        self.listWidget_current_test.setGeometry(QtCore.QRect(20, 110, 1120, 260))
        self.listWidget_current_test.setObjectName("listWidget_second_window_for_json")        # listWidget_second_window


        self.comboBox_select_files = QtWidgets.QComboBox(self)
        self.comboBox_select_files.setGeometry(QtCore.QRect(110, 480, 220, 25))
        self.comboBox_select_files.setObjectName("comboBox_select_files_for_json")             # comboBox for select json files
        
        self.comboBox_select_files.addItems(["All Tests", "Geoloc Timing", "Payload", "Uplink MQTT", "Downlink MQTT", "Lora Link Check"])


        self.Json_button = QtWidgets.QPushButton(self)
        self.Json_button.setGeometry(QtCore.QRect(1040, 800, 100, 40))
        self.Json_button.setObjectName("Json_button")  

        self.Json_button.setEnabled(False)                                                       # Json_button for test files
        
        self.select_files_label = QtWidgets.QLabel(self)
        self.select_files_label.setGeometry(QtCore.QRect(20, 480, 90, 30))
        self.select_files_label.setObjectName("select_files_label_for_json")                     # select_files_label for json

        self.listWidget_select_files = QtWidgets.QListWidget(self)
        self.listWidget_select_files.setGeometry(QtCore.QRect(20, 520, 1120, 270))
        self.listWidget_select_files.setObjectName("listWidget_select_files_for_json")           # listWidget_select_files for json


        self.Exit_button = QtWidgets.QPushButton(self)
        self.Exit_button.setGeometry(QtCore.QRect(20, 800, 90, 40))
        self.Exit_button.setObjectName("Exit_button")

        self.Exit_button.clicked.connect(self.close)                         # Connect the exit button to close the window

        self.checkBox_show_only_failed_tests = QtWidgets.QCheckBox(self)
        self.checkBox_show_only_failed_tests.setGeometry(QtCore.QRect(390, 80, 170, 25))
        self.checkBox_show_only_failed_tests.setObjectName("checkBox_show_only_failed_tests")   # checkBox_show_only_failed_tests

        self.lineEdit_search_test_file = QtWidgets.QLineEdit(self)
        self.lineEdit_search_test_file.setGeometry(QtCore.QRect(130, 30, 690, 25))
        self.lineEdit_search_test_file.setObjectName("lineEdit_search_test_file")               # lineEdit_search_test_file

        self.search_test_file_label = QtWidgets.QLabel(self)
        self.search_test_file_label.setGeometry(QtCore.QRect(30, 30, 90, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.search_test_file_label.setFont(font)
        self.search_test_file_label.setObjectName("search_test_file_label")                     # search_test_file_label

        self.Search_test_button = QtWidgets.QPushButton(self)
        self.Search_test_button.setGeometry(QtCore.QRect(850, 30, 90, 30))
        self.Search_test_button.setObjectName("Search_test_button")                             # Search_test_button

        self.Search_json_button = QtWidgets.QPushButton(self)
        self.Search_json_button.setGeometry(QtCore.QRect(840, 440, 90, 30))
        self.Search_json_button.setObjectName("Search_json_button")                             # Search_json_button

        self.Description_button = QtWidgets.QPushButton(self)
        self.Description_button.setGeometry(QtCore.QRect(910, 800, 100, 40))
        self.Description_button.setObjectName("Description_button")                             # Description_button 

        self.Description_button.setEnabled(False)

        self.lineEdit_search_json_file = QtWidgets.QLineEdit(self)
        self.lineEdit_search_json_file.setGeometry(QtCore.QRect(120, 440, 691, 25))
        self.lineEdit_search_json_file.setObjectName("lineEdit_search_json_file")               # lineEdit_search_json_file

        self.search_json_file_label = QtWidgets.QLabel(self)
        self.search_json_file_label.setGeometry(QtCore.QRect(20, 440, 90, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.search_json_file_label.setFont(font)
        self.search_json_file_label.setObjectName("search_json_file_label")                     # search_json_file_label 
        
        self.delete_log_button = QtWidgets.QPushButton(self)
        self.delete_log_button.setGeometry(QtCore.QRect(20, 380, 110, 40))
        self.delete_log_button.setObjectName("delete_log_button")                               # delete_log_button

        self.Search_test_button.setStyleSheet("background-color: rgb(143, 240, 164);")
        self.Search_json_button.setStyleSheet("background-color: rgb(143, 240, 164);")
        self.delete_log_button.setStyleSheet("background-color: rgb(143, 240, 164);")
        self.Exit_button.setStyleSheet("background-color: rgb(143, 240, 164);")

        self.retranslateUi()

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Logs", "Logs"))
        self.test_label.setText(_translate("Logs", "Select Tests :"))
        self.Json_button.setText(_translate("Logs", "Json"))
        self.select_files_label.setText(_translate("Logs", "Select Files :"))
        self.Exit_button.setText(_translate("Logs", "Exit"))
        self.Result_current_and_previous_test_button.setText(_translate("Logs", "Result"))
        self.Json_current_and_previous_test_button.setText(_translate("Logs", "Json"))
        self.terminal_log_current_and_previous_test_button.setText(_translate("Logs", "Debug log"))
        self.status_label.setText(_translate("Logs", "Status - Time"))
        self.checkBox_show_only_failed_tests.setText(_translate("Logs", "Show only Failed tests"))
        self.search_test_file_label.setText(_translate("Logs", "Search file :"))
        self.Search_test_button.setText(_translate("Logs", "Search"))
        self.Search_json_button.setText(_translate("Logs", "Search"))
        self.search_json_file_label.setText(_translate("Logs", "Search json :"))
        self.delete_log_button.setText(_translate("Logs", "Delete all logs"))
        self.Description_button.setText(_translate("Logs", "Description"))

class logs_window_list:
    def __init__(self, w, Logs_window_main, list_controller):
        self.w = w
        self.Logs_window_main = Logs_window_main
        self.list_controller = list_controller
        self.test_name_current_and_previous = ""
        self.setup_connections()

        
    def setup_connections(self):
        self.Logs_window_main.comboBox_select_files.currentTextChanged.connect(self.change_testlist_by_group_for_json)  # change tests by group in the combobox
        self.Logs_window_main.comboBox_select_tests.currentTextChanged.connect(self.change_final_testlist_for_previous) # change to chow previous tests results
        self.Logs_window_main.listWidget_select_files.addItems(self.w.json_all_files_without_extension)                 # to show initially, all the test files for json when you open log window 
        self.Logs_window_main.listWidget_current_test.itemClicked.connect(self.choose_current_and_completed_tests)      # extract the file name from two lables
        self.Logs_window_main.Search_json_button.clicked.connect(self.filter_json_based_on_search)                      # filter_json_based_on_search
        
        

    def choose_current_and_completed_tests(self, item):
        item_widget = self.Logs_window_main.listWidget_current_test.itemWidget(item)
        if item_widget:
            test_name_label = item_widget.findChild(QtWidgets.QLabel)
            if test_name_label:
                print(f"Clicked on test: {test_name_label.text()}")
                self.test_name_current_and_previous = test_name_label.text()                             # store the file name in the variable     
                self.Logs_window_main.Result_current_and_previous_test_button.setEnabled(True)
                self.Logs_window_main.Json_current_and_previous_test_button.setEnabled(True) 
                self.Logs_window_main.terminal_log_current_and_previous_test_button.setEnabled(True)


    def change_final_testlist_for_previous(self, group_name):                                                           # update previous completed tests

        self.Logs_window_main.checkBox_show_only_failed_tests.setCheckState(Qt.CheckState.Unchecked)

        if group_name == "Previous Tests":           
            old_tests_results = self.previous_tests()                                                                   # call previous_tests() function to update the previous completed tests                                                                     
            self.update_current_and_previous_tests(old_tests_results, self.Logs_window_main.listWidget_current_test)    # update the results into current tests list widget
        self.Logs_window_main.Result_current_and_previous_test_button.setEnabled(False)
        self.Logs_window_main.Json_current_and_previous_test_button.setEnabled(False) 
        self.Logs_window_main.terminal_log_current_and_previous_test_button.setEnabled(False)

    def change_testlist_by_group_for_json(self, group_name):                                                            # update the listwidget based on the group for json
            self.list_controller.change_testlist_by_group(group_name, self.Logs_window_main.listWidget_select_files)
            self.Logs_window_main.Json_button.setEnabled(False)                                        # json button off   
            self.Logs_window_main.Description_button.setEnabled(False)                                 # description button is off 

    def update_current_and_previous_tests(self, final_result, Qlistwidget):        # update current and previous tests result in listwidget

        Qlistwidget.clear()

        for test_name, result in final_result.items():
            self.item_widget = QtWidgets.QWidget()
            item_layout = QtWidgets.QHBoxLayout()
            
                                                                 # Add test name label
            test_label = QtWidgets.QLabel(test_name)
            item_layout.addWidget(test_label)

                                                                 # Add a spacer to push the result label to the right
            item_layout.addStretch()
            
                                                                 # Add result label
            result_label = QtWidgets.QLabel(result)
            if result.startswith("Pass"):
                result_label.setStyleSheet("color: green;")
            else:
                result_label.setStyleSheet("color: red;")    
            item_layout.addWidget(result_label)
            
            self.item_widget.setLayout(item_layout)
            
            self.list_item = QtWidgets.QListWidgetItem(Qlistwidget)
            self.list_item.setSizeHint(self.item_widget.sizeHint())
            Qlistwidget.addItem(self.list_item)
            Qlistwidget.setItemWidget(self.list_item, self.item_widget)

    
    def previous_tests(self):               # to get the latest previous tests results

        previous_final_result = {}
        path = current_dir + "/PyQT_GUI/logs_SM2/Result_logs_SM2"
        complted_tests_lists = os.listdir(path)

        complted_tests_lists.sort(key=lambda x: os.path.getmtime(os.path.join(path, x)), reverse=True)
        
        result_tests = "Pass"

        for i in complted_tests_lists:

            Test_case = open(path + "/" + i, 'r')   
             
            while True:
                line = Test_case.readline()
                
                if not line:
                    break
                
                if re.compile("Fail").search(line):
                    result_tests = "Fail"

                elif re.compile("Timeout_fail").search(line):
                    result_tests = "Timeout"

                elif re.compile("Loop_error").search(line):
                    result_tests = "Loop Error"
                   
                elif re.search("Total Test Time",line):
                    time = line.split(":").pop()

            Test_case.close()
            
            try:
                previous_final_result[Path(i).stem] = result_tests + " -" + time
            except UnboundLocalError:    
                previous_final_result[Path(i).stem] = result_tests + " -"    
            result_tests = "Pass"
            #print(previous_final_result)
   
        return previous_final_result  
    

    def filter_json_based_on_search(self):

        if self.Logs_window_main.lineEdit_search_json_file.text() != "":             # search json when lineEdit_search_json_file is not empty
            self.Logs_window_main.listWidget_select_files.clear()
            self.Logs_window_main.listWidget_select_files.addItems([Path(i).stem for i in self.w.json_all_files if i.startswith(self.Logs_window_main.lineEdit_search_json_file.text())])
     
class colour_button:
    def __init__(self, w, Logs_window_main):
        self.w = w
        self.Logs_window_main = Logs_window_main

        self.timer = QtCore.QTimer()
        self.timer.start(100)

        self.timer.timeout.connect(self.check_button_state)
 
    def check_button_state(self):           # changing colour based on the button state
            
            
            buttons_list = [self.w.Start_Test, self.w.Stop_Test, self.w.Setup_button, self.w.Select_all, self.w.Clear_all, self.w.clear_trace,
                            self.Logs_window_main.Result_current_and_previous_test_button, self.Logs_window_main.Json_current_and_previous_test_button, self.Logs_window_main.terminal_log_current_and_previous_test_button,
                            self.Logs_window_main.Description_button, self.Logs_window_main.Json_button ]  
            

            for i in buttons_list:
                if i.isEnabled() == True:
                    i.setStyleSheet("background-color: rgb(143, 240, 164);")
                else:
                    i.setStyleSheet("background-color: rgb(246, 97, 81);")   

            if self.w.my_test_lists.isEnabled() == True:
                self.w.my_test_lists.setStyleSheet("background-color: ")
            else:
                self.w.my_test_lists.setStyleSheet("background-color: rgb(246, 97, 81);")   

            if self.w.comboBox_test_group.isEnabled() == True:
                self.w.comboBox_test_group.setStyleSheet("background-color: ")
            else:
                self.w.comboBox_test_group.setStyleSheet("background-color: rgb(246, 97, 81);")        

                      

                        



if __name__ == "__main__":
    import sys, os
    import subprocess, re


    app = QtWidgets.QApplication(sys.argv)
    QMainWindow = QtWidgets.QMainWindow()

    w = MainWindow()
    Logs_window_main = Logs_window()
    setup_window_main = setup_window(w)
    w.setupUi(QMainWindow, Logs_window_main, setup_window_main)
    list_controller = list_files_selection(w)
    log_window_list_controller = logs_window_list(w,Logs_window_main,list_controller)
    state_initializer = initiate_statemachine(w, list_controller, log_window_list_controller, Logs_window_main, setup_window_main)
    log_controller = log_selection(w,Logs_window_main,log_window_list_controller)
    colour_controller = colour_button(w,Logs_window_main)
    
    
    QMainWindow.show()
    sys.exit(app.exec())

    

